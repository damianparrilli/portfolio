---
import "../styles/global.css";
import SelectLanguage from "../components/SelectLanguage.astro";
import NavMenu from "../components/NavMenu.astro";

interface Props {
  title: string;
  description: string;
  keywords?: string;
}

const { title, description, keywords } = Astro.props;
---

<!doctype html>
<html lang="es" class="dark">
  <head>
    <meta charset="UTF-8" />

    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="kewords" content={keywords} />

    <!-- Open Graph -->
    <!-- Facebook Meta Tags -->
    <meta property="og:url" content="https://bontedeco.netlify.app" />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta
      property="og:image"
      content="https://opengraph.b-cdn.net/production/images/870324c4-b71e-4a6e-8541-183c509b1f2c.webp?token=koboDCOpKOrDZWKk2_o3netnSJVerLFeG1q17I4YiKQ&height=655&width=1200&expires=33265650320"
    />

    <!-- Twitter Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:domain" content="bontedeco.netlify.app" />
    <meta property="twitter:url" content="https://bontedeco.netlify.app" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta
      name="twitter:image"
      content="https://opengraph.b-cdn.net/production/images/870324c4-b71e-4a6e-8541-183c509b1f2c.webp?token=koboDCOpKOrDZWKk2_o3netnSJVerLFeG1q17I4YiKQ&height=655&width=1200&expires=33265650320"
    />

    <meta name="viewport" content="width=device-width" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      rel="preload"
      href="https://fonts.googleapis.com/css2?family=Afacad+Flux:wght@100..1000&family=Italiana&family=Manrope:wght@200..800&family=Montserrat:ital,wght@0,100..900;1,100..900&family=Plus+Jakarta+Sans:ital,wght@0,200..800;1,200..800&family=Rajdhani:wght@300;400;500;600;700&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap"
      as="style"
      onload="this.rel='stylesheet'"
    />
    <link rel="apple-touch-icon" sizes="180x180" href="/favicon_dark/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon_dark//favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon_dark//favicon-16x16.png" />
    <link rel="manifest" href="/favicon_dark/site.webmanifest" />

    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <script is:inline>
      const defaultLang = navigator.language.startsWith("es") ? "es" : "en";
      const savedLang = localStorage.getItem("lang") || defaultLang;
      localStorage.setItem("lang", savedLang);
      document.documentElement.setAttribute("lang", savedLang);
      updateText(savedLang);
    </script>
  </head>

  <body class="bg-[#E0E0E0] dark:bg-[#1f1f1f]">
    <SelectLanguage />
    <NavMenu />
    <slot />
  </body>
</html>

<script is:inline>
  const supportsScrollDrivenAnimation = CSS.supports(
    "animation-timeline: view()"
  );

  if (!supportsScrollDrivenAnimation) {
    const link = document.createElement("link");
    link.rel = "stylesheet";
    link.href = "https://unpkg.com/aos@2.3.1/dist/aos.css";
    document.head.appendChild(link);

    const script = document.createElement("script");
    script.src = "https://unpkg.com/aos@2.3.1/dist/aos.js";
    script.onload = () => {
      AOS.init();
    };
    document.body.appendChild(script);
  }

  document.addEventListener("DOMContentLoaded", () => {});

  function updateText(lang) {
    fetch("/data/translations.json")
      .then((response) => response.json())
      .then((data) => {
        document.querySelectorAll("[data-i18n]").forEach((el) => {
          const key = el.getAttribute("data-i18n");
          const translation = data[lang][key];

          if (el.querySelector("svg")) {
            const svgElement = el.querySelector("svg");

            // Si el JSON tiene etiquetas <span>, usamos innerHTML
            el.innerHTML = svgElement.outerHTML + translation;
          } else {
            // Si el JSON tiene etiquetas <span>, usamos innerHTML
            el.innerHTML = translation;
          }
        });

        // Si el texto animado (role) debe actualizarse
        const roleElement = document.querySelector("[data-i18n='role']");
        if (roleElement) {
          roleElement.innerHTML = data[lang]["role"];
        }
        initializeTxtRotate();
      });
  }

  function initializeTxtRotate() {
    var elements = document.getElementsByClassName("txt-rotate");
    for (var i = 0; i < elements.length; i++) {
      var toRotate = elements[i].getAttribute("data-rotate");
      var period = elements[i].getAttribute("data-period");
      if (toRotate) {
        new TxtRotate(elements[i], JSON.parse(toRotate), period);
      }
    }
  }

  function markImage(clickedImage) {
    const parentContainer = clickedImage.closest(".image-container");

    parentContainer.querySelectorAll(".cursor-pointer").forEach((img) => {
      img.classList.remove("border-2", "border-[#3D7AFF]");
    });

    clickedImage.classList.add("border-2", "border-[#3D7AFF]");
  }

  function changeBackground(imageSrc, targetDiv) {
    if (targetDiv) {
      targetDiv.style.backgroundImage = `url(${imageSrc})`;
      targetDiv.style.backgroundPosition = "top";
    }
  }

  document.querySelectorAll(".image-container").forEach((container) => {
    const backgroundDiv = container.querySelector(".backgroundDiv");

    container.querySelectorAll(".cursor-pointer").forEach((img) => {
      img.addEventListener("click", function () {
        changeBackground(this.src, backgroundDiv);
        markImage(this);
      });
    });

    backgroundDiv.addEventListener("mousemove", function (event) {
      const rect = backgroundDiv.getBoundingClientRect();
      const x = event.clientX - rect.left;
      const y = event.clientY - rect.top;
      const moveX = (x / rect.width) * 100;
      const moveY = (y / rect.height) * 100;

      backgroundDiv.style.backgroundPosition = `${moveX}% ${moveY}%`;
    });
  });
</script>
