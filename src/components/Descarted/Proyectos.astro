<!-- ---
import BBRacingParts from "./Proyectos/BBRacingParts.astro";
import BonteDeco from "./Proyectos/BonteDeco.astro";
import BoxedCat from "./Proyectos/BoxedCat.astro";
import Portfoliov1 from "./Proyectos/Portfoliov1.astro";
import FreneticComics from "./Proyectos/FreneticComics.astro";
--- -->

<section
  id="proyectos"
  class="w-full bg-[#cccccc] dark:bg-[#303030] relative -z-20"
>
  <div
    class="contenedor min-h-[20dvh] bg-[#cccccc] dark:bg-[#303030] flex items-center justify-center px-4 sm:px-7"
  >
    <h2
      class="font-bold text-[#272727] dark:text-[#F9F9F9] text-3xl sm:text-4xl" data-i18n="myProjects"
    >
      Mis proyectos
    </h2>
  </div>

  <section id="sectionPin">
    <div class="pin-wrap-sticky contenedor overflow-x-hidden">
      <div class="pin-wrap flex">
        <!-- <BonteDeco />
        <BBRacingParts />
        <BoxedCat />
        <FreneticComics />
        <Portfoliov1 /> -->
      </div>
    </div>
  </section>

  <div
    class="carousel-indicator flex justify-center items-center sticky bottom-0 h-[9dvh] md:h-[7dvh] -z-10"
  >
    <div
      class="indicator w-3 h-3 rounded-full bg-[#4e4e4e] dark:bg-[#F9F9F9]"
      data-index="0"
    >
    </div>
    <div
      class="indicator w-3 h-3 rounded-full bg-[#4e4e4e] dark:bg-[#F9F9F9]"
      data-index="1"
    >
    </div>
    <div
      class="indicator w-3 h-3 rounded-full bg-[#4e4e4e] dark:bg-[#F9F9F9]"
      data-index="2"
    >
    </div>
    <div
      class="indicator w-3 h-3 rounded-full bg-[#4e4e4e] dark:bg-[#F9F9F9]"
      data-index="3"
    >
    </div>
    <div
      class="indicator w-3 h-3 rounded-full bg-[#4e4e4e] dark:bg-[#F9F9F9]"
      data-index="4"
    >
    </div>
  </div>
</section>

<style>
  @supports (animation-timeline: view()) {
    @keyframes move {
      to {
        transform: translateX(calc(-100% + min(1200px, 100vw)));
      }
    }

    #sectionPin {
      height: 500vh;
      overflow: visible;
      view-timeline-name: --section-pin-tl;
      view-timeline-axis: block;
    }

    .pin-wrap-sticky {
      height: 93vh;
      width: 100vw;
      position: sticky;
      top: 0;
      width: 100vw;
    }

    .pin-wrap {
      height: 93dvh;
      width: calc(min(1200px, 100vw) * 5);
      will-change: transform;
      animation: linear move forwards;
      animation-timeline: --section-pin-tl;
      animation-range: contain 0% contain 100%;
    }

    @media (width < 1200px) {
      .pin-wrap-sticky {
        overflow-x: hidden;
      }
    }

    .carousel-indicator {
      display: flex;
      justify-content: center;
      gap: 8px;
    }

    .indicator.active {
      background-color: #3d7aff;
    }

    .indicator {
      transition: background-color 0.3s ease;
    }
  }

  @supports not (animation-timeline: view()) {
    .carousel-indicator {
      display: none;
    }

    .pin-wrap {
      flex-direction: column;
      gap: 20px;
      padding-bottom: 9rem;
    }

    
  }

  media
</style>

<style is:global>
  @supports not (animation-timeline: view()) {
    .pin-item {
      height: 90dvh;
    }

    .backgroundDiv {
      height: auto;
    }

    @media (width < 768px){

      .pin-item {
        min-height: 650px;
    }

    span{
      height: 100%;
    }
      .div-adicional{
        display: none;
      }

      .image-container {
        justify-content: space-evenly;
      }
    }

    @media (width >= 768px) and (height < 650px) {
      .div-adicional{
        display: none;
      }
    }

  }

  @supports (animation-timeline: view()) {
    @media (width < 768px){
    .pin-item {
      height: 91dvh;
    }
  }

  }
</style>

<script is:inline>
  const pins = document.querySelectorAll(".pin-item");
  const indicators = document.querySelectorAll(".indicator");

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        const index = Array.from(pins).indexOf(entry.target);

        if (entry.isIntersecting) {
          indicators.forEach((indicator, i) => {
            if (i === index) {
              indicator.classList.add("active");
            } else {
              indicator.classList.remove("active");
            }
          });
        }
      });
    },
    {
      root: null,
      threshold: 0.5,
    }
  );

  pins.forEach((pin) => {
    observer.observe(pin);
  });
</script>
